name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - 'package.json'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.js'
      - 'package.json'

permissions:
  contents: read

jobs:
  lint_typecheck:
    name: Lint & TypeCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint
      - run: pnpm run type-check

  test_coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - run: pnpm run test:coverage
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            ./coverage/
            !./coverage/tmp/

  security:
    name: Security (Audit + SBOM)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - name: Audit (high+)
        run: pnpm run audit:ci
      - name: Generate SBOM (Syft via Docker)
        run: docker run --rm -v ${PWD}:/work -w /work anchore/syft:latest dir:. -o cyclonedx-json=sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.json

  build_tarball:
    name: Build package tarball
    runs-on: ubuntu-latest
    needs: [lint_typecheck, test_coverage, security]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x', cache: 'pnpm' }
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - run: |
          mkdir -p artifacts
          npm pack --pack-destination ./artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: package-tarball
          path: artifacts/*.tgz
          if-no-files-found: error
