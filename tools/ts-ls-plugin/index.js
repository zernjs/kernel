// TypeScript Language Service plugin to auto-generate Zern augmentations on save
// and include them transparently in the project. Editor-agnostic.
//
// Config (tsconfig.json):
// {
//   "compilerOptions": {
//     "plugins": [
//       { "name": "./tools/ts-ls-plugin", "patterns": ["**/*.plugin.ts"] }
//     ]
//   }
// }

const fs = require('node:fs');
const path = require('node:path');

function log(info, ...args) {
  try {
    info.project.projectService.logger.info('[zern-tsls]', ...args);
  } catch (_) {
    // noop
  }
}

function findFiles(root, patternGlobs, sys) {
  // very lightweight scan: recursively traverse and filter by suffix
  const results = [];
  function walk(dir) {
    let entries = [];
    try {
      entries = sys.readDirectory(dir, ['.ts'], undefined, ['**/*.plugin.ts']);
    } catch (_) {
      return;
    }
    for (const file of entries) {
      if (file.endsWith('.plugin.ts')) results.push(file);
    }
  }
  walk(root);
  return results;
}

function parseDescriptor(sys, file) {
  const content = sys.readFile(file) || '';
  const evMatch = content.match(
    /events\.createEvents\(\s*['"]([^'"]+)['"]\s*,\s*\{([\s\S]*?)\}\s*\)/
  );
  const uiMatch = content.match(
    /alerts\.createAlerts\(\s*['"]([^'"]+)['"]\s*,\s*\{([\s\S]*?)\}\s*\)/
  );
  const parseKeys = body => {
    const keys = [];
    const re = /([A-Za-z_][A-Za-z0-9_]*)\s*:/g;
    let m;
    while ((m = re.exec(body)) !== null) keys.push(m[1]);
    return Array.from(new Set(keys));
  };
  const ev = evMatch ? { ns: evMatch[1], keys: parseKeys(evMatch[2]) } : null;
  const ui = uiMatch ? { ns: uiMatch[1], keys: parseKeys(uiMatch[2]) } : null;
  return { ev, ui };
}

function generateDts(pairs) {
  const evEntries = [];
  const uiEntries = [];
  for (const p of pairs) {
    if (p.ev && p.ev.keys.length > 0) {
      const shape = p.ev.keys
        .map(k => `${k}: import('./src/events/types').EventDef<unknown>`)
        .join('; ');
      evEntries.push(`${p.ev.ns}: { ${shape} };`);
    }
    if (p.ui && p.ui.keys.length > 0) {
      const shape = p.ui.keys
        .map(k => `${k}: import('./src/alerts/types').AlertDef<unknown>`)
        .join('; ');
      uiEntries.push(`${p.ui.ns}: { ${shape} };`);
    }
  }
  const evBlockSrc = `declare module './src/events/types' { interface ZernEvents {\n${evEntries
    .map(s => `  ${s}`)
    .join('\n')}\n} }`;
  const evBlockAlias = `declare module '@events/types' { interface ZernEvents {\n${evEntries
    .map(s => `  ${s}`)
    .join('\n')}\n} }`;
  const uiBlockSrc = `declare module './src/alerts/types' { interface ZernAlerts {\n${uiEntries
    .map(s => `  ${s}`)
    .join('\n')}\n} }`;
  const uiBlockAlias = `declare module '@alerts/types' { interface ZernAlerts {\n${uiEntries
    .map(s => `  ${s}`)
    .join('\n')}\n} }`;
  return `/** AUTO-GENERATED by zern ts-ls plugin */\n${[
    evBlockSrc,
    evBlockAlias,
    uiBlockSrc,
    uiBlockAlias,
  ]
    .filter(Boolean)
    .join('\n')}`;
}

function ensureDir(p) {
  const dir = path.dirname(p);
  fs.mkdirSync(dir, { recursive: true });
}

function create(info) {
  const sys = info.languageServiceHost; // ts server sys-like
  const project = info.project;
  const cwd = project.getCurrentDirectory();
  const patterns = (info.config && info.config.patterns) || ['**/*.plugin.ts'];
  const virtual = path.resolve(cwd, '__zern_virtual_augmentations.d.ts');
  let lastContent = '';

  function run() {
    try {
      const files = findFiles(cwd, patterns, info.languageServiceHost);
      const pairs = files.map(f => ({
        importPath: path.relative(path.resolve(cwd, 'src'), f).startsWith('..')
          ? path.relative(cwd, f).replace(/\\/g, '/')
          : `../${path.relative(path.resolve(cwd, 'src'), f).replace(/\\/g, '/')}`,
        ...parseDescriptor(info.languageServiceHost, f),
      }));
      lastContent = generateDts(pairs);
      log(info, `generated virtual augmentations`);
    } catch (err) {
      log(info, `generation failed: ${String(err && err.message)}`);
    }
  }

  // initial run
  run();

  // patch host to serve virtual file content
  const origGetScriptSnapshot = info.languageServiceHost.getScriptSnapshot?.bind(
    info.languageServiceHost
  );
  info.languageServiceHost.getScriptSnapshot = fileName => {
    if (path.resolve(fileName) === virtual) {
      const ts = info.typescript;
      return ts.ScriptSnapshot.fromString(lastContent);
    }
    return origGetScriptSnapshot ? origGetScriptSnapshot(fileName) : undefined;
  };

  return info.languageService;
}

function getExternalFiles(project) {
  const cwd = project.getCurrentDirectory();
  return [path.resolve(cwd, '__zern_virtual_augmentations.d.ts')];
}

module.exports = { create, getExternalFiles };
